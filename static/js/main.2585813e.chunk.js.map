{"version":3,"sources":["search/LocationInput.jsx","searchResults/OfferedPizzas.jsx","searchResults/PizzaShop.jsx","searchResults/PizzaShopList.jsx","App.js","search/GetPizzaShops.js","reportWebVitals.js","index.js"],"names":["LocationInput","setLatLng","setSelectedAddress","useState","address","setAddress","value","onChange","onSelect","geocodeByAddress","then","results","getLatLng","latLng","catch","error","console","searchOptions","types","getInputProps","getSuggestionItemProps","suggestions","placeholder","className","map","suggestion","description","placeId","OfferedPizzas","shop","pizzas","pizza","PizzaShop","shopname","phone","PizzaShopList","shops","selectedAddress","objectID","App","setShops","handleSearch","lat","toString","lng","userLocation","concat","algoliasearch","initIndex","search","aroundLatLng","hits","GetPizzaShops","log","name","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootEl","document","getElementById","ReactDOM","render","StrictMode"],"mappings":"uPAOe,SAASA,EAAT,GAA2D,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,mBAAsB,EAEvCC,mBAAS,IAF8B,mBAE9DC,EAF8D,KAErDC,EAFqD,KAyBvE,OACE,cAAC,IAAD,CACEC,MAAOF,EACPG,SAxBJ,SAAsBH,GACpBC,EAAWD,IAwBTI,SApBJ,SAAsBJ,GACpBK,2BAAiBL,GACdM,MAAK,SAACC,GAAD,OAAaC,oBAAUD,EAAQ,OACpCD,MAAK,SAACG,GACLZ,EAAUY,MAEXC,OAAM,SAACC,GAAD,OAAWC,QAAQD,MAAM,QAASA,MAC3CV,EAAWD,GACXF,EAAmBE,IAajBa,cATkB,CACpBC,MAAO,CAAC,cAIR,SAMG,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,uBAAwBC,EAA1C,EAA0CA,YAA1C,OACC,gCACE,qCACMF,EAAc,CAChBG,YAAa,2BACbC,UAAW,oBAGf,qBAAKA,UAAU,wBAAf,SAEGF,EAAYG,KAAI,SAACC,GAChB,OACE,6CACEF,UAAU,sBAENH,EAAuBK,IAH7B,aAKE,+BACGA,EAAWC,gBAJTD,EAAWE,oBCnDnB,SAASC,EAAT,GAAkC,IAATC,EAAQ,EAARA,KACxC,OAEI,aADA,CACA,gBACKA,EAAKC,OAAON,KAAI,SAACO,GAAD,OACf,4BAAgBA,GAARA,QCHH,SAASC,EAAT,GAA8B,IAATH,EAAQ,EAARA,KAElC,OACE,sBAAKN,UAAU,YAAf,UACE,sBAAKA,UAAU,eAAf,UACE,6BAAKM,EAAKI,WACV,4BAAIJ,EAAKzB,UACT,4BAAIyB,EAAKK,WAEX,sBAAKX,UAAU,cAAf,UACE,gDACA,cAACK,EAAD,CAAeC,KAAMA,UCZd,SAASM,EAAT,GAAoD,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,gBAG7C,OAAc,OAAVD,EACK,qBAAKb,UAAU,YAIpB,sBAAKA,UAAU,UAAf,UACY,MAATa,GAAiB,uDAA0BC,KAC3CD,EAAMZ,KAAI,SAACK,GAAD,OACT,cAACG,EAAD,CAAWH,KAAMA,GAAWA,EAAKS,gB,oBCkC5BC,MAzCf,WAAe,MAEiCpC,mBAAS,IAF1C,mBAENkC,EAFM,KAEWnC,EAFX,OAIeC,mBAAS,IAJxB,mBAINU,EAJM,KAIEZ,EAJF,OAMaE,mBAAS,MANtB,mBAMNiC,EANM,KAMCI,EAND,KASb,SAASC,IACQ,KAAX5B,ECfO,YAA8C,IAArBA,EAAoB,EAApBA,OAAQ2B,EAAY,EAAZA,SAE1CE,EAAM7B,EAAO6B,IAAIC,WACjBC,EAAM/B,EAAO+B,IAAID,WACjBE,EAAeH,EAAII,OAAO,KAAMF,GAGrBG,IACb,aACA,oCAEmBC,UAAU,cAI5BC,OAAO,GAAI,CACVC,aAAcL,IAEfnC,MAAK,YAAe,IAAZyC,EAAW,EAAXA,KACPX,EAASW,MDATC,CAAc,CAACvC,SAAQ2B,aAHvBxB,QAAQqC,IAAI,mBAOhB,OACE,sBAAK9B,UAAU,MAAf,UAIE,yBAASA,UAAU,SAAnB,SACE,sBAAKA,UAAU,kBAAf,UACE,8CAEA,cAACvB,EAAD,CAAesD,KAAK,SAAShC,YAAY,SAASrB,UAAWA,EAAWC,mBAAoBA,IAE5F,wBAAQqD,QAAS,kBAAMd,KAAgBlB,UAAU,eAAjD,yBAKJ,yBAASA,UAAU,iBAAnB,SACE,cAACY,EAAD,CAAeC,MAAOA,EAAOC,gBAAiBA,UE9BvCmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhD,MAAK,YAAkD,IAA/CiD,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDRO,EAASC,SAASC,eAAe,QAEvCC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAGNL,GAEFR,K","file":"static/js/main.2585813e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng,\n} from \"react-places-autocomplete\";\nimport \"../App.css\";\n\nexport default function LocationInput({ setLatLng, setSelectedAddress }) {\n    // Store address to be recieved from user\n    const [address, setAddress] = useState('');\n  \n  function handleChange(address) {\n    setAddress(address);\n  }\n\n  // When user selects an address, set\n  function handleSelect(address) {\n    geocodeByAddress(address)\n      .then((results) => getLatLng(results[0]))\n      .then((latLng) => {\n        setLatLng(latLng);\n      })\n      .catch((error) => console.error(\"Error\", error));\n    setAddress(address);\n    setSelectedAddress(address);\n  }\n\n  // Set search type to regions (allows postcode and suburb but not address)\n  const searchOptions = {\n    types: [\"(regions)\"]\n  }\n\n  return (\n    <PlacesAutocomplete\n      value={address}\n      onChange={handleChange}\n      onSelect={handleSelect}\n      searchOptions={searchOptions}\n    >\n      {({ getInputProps, getSuggestionItemProps, suggestions }) => (\n        <div>\n          <input \n            {...getInputProps({\n              placeholder: \"Enter suburb or postcode\",\n              className: \"LocationInput\",\n            })}\n          />\n          <div className='AutocompleteContainer'>\n            {/* Show google maps autocomplete suggestions */}\n            {suggestions.map((suggestion) => {\n              return (\n                <div\n                  className='AutocompletePlaces'\n                  key={suggestion.placeId}\n                  {...getSuggestionItemProps(suggestion)}\n                >\n                  <span>\n                    {suggestion.description}\n                  </span>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </PlacesAutocomplete>\n  );\n}\n","import React from \"react\";\n\nexport default function OfferedPizzas({ shop }) {\nreturn (\n    // return a div with all pizzas in the array\n    <div>\n        {shop.pizzas.map((pizza) => (\n          <p key={pizza}>{pizza}</p>\n        ))}\n      </div>\n    \n  );\n}\n","import React from \"react\";\nimport \"../App.css\";\nimport OfferedPizzas from \"./OfferedPizzas\";\n\nexport default function PizzaShop({ shop }) {\n  // Display the shop data\n  return (\n    <div className='PizzaShop'>\n      <div className='PizzaDetails'>\n        <h3>{shop.shopname}</h3>\n        <p>{shop.address}</p>\n        <p>{shop.phone}</p>\n      </div>\n      <div className='PizzaOffers'>\n        <h4>Pizzas Offered</h4>\n        <OfferedPizzas shop={shop} />\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport PizzaShop from \"./PizzaShop\";\n\nexport default function PizzaShopList({ shops, selectedAddress }) {\n  // Check if shops has been set\n  // If shops have not been set, return an empty div\n  if (shops === null) {\n    return <div className='Results' />;\n  } else {\n    // If shops have been set, return shops in a div\n    return (\n      <div className='Results'>\n        {shops != null && <h2>Showing results near {selectedAddress}</h2>}\n        {shops.map((shop) => (\n          <PizzaShop shop={shop} key={shop.objectID} />\n        ))}\n      </div>\n    );\n  }\n}\n","import './App.css';\nimport LocationInput from './search/LocationInput.jsx';\nimport { useState } from 'react';\nimport React from 'react';\nimport PizzaShopList from './searchResults/PizzaShopList';\nimport GetPizzaShops from './search/GetPizzaShops';\n\nfunction App() {\n  // Store the selected address\n  const [selectedAddress, setSelectedAddress] = useState('');\n  // Store the coordinates of the user\n  const [latLng, setLatLng] = useState('');\n  // Store the pizza shops recieved from algolia\n  const [shops, setShops] = useState(null);\n\n  // Ensure the user has entered a valid address\n  function handleSearch() {\n    if (latLng === '') {\n      console.log('invalid address')\n      return\n    } else {\n      GetPizzaShops({latLng, setShops})\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      \n      {/* Header */}\n\n      <section className=\"Header\">\n        <div className=\"HeaderContainer\">\n          <h1>Pizza Finder</h1>\n          {/* Custom Input Component containing react-native-places, google maps based suggestions */}\n          <LocationInput name=\"suburb\" placeholder=\"Suburb\" setLatLng={setLatLng} setSelectedAddress={setSelectedAddress} />\n          {/* Update shops array with events from algolia */}\n          <button onClick={() => handleSearch()} className=\"SearchButton\">Search</button>\n        </div>\n      </section>\n      \n      {/* Results */}\n      <section className=\"ResultsSection\">\n        <PizzaShopList shops={shops} selectedAddress={selectedAddress} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import algoliasearch from \"algoliasearch/lite\";\n\nexport default function GetPizzaShops({ latLng, setShops }) {\n  // Convert coordinates into a string for angolia to process\n  var lat = latLng.lat.toString();\n  var lng = latLng.lng.toString();\n  var userLocation = lat.concat(\", \", lng);\n\n  // Angolia initialisation\n  const client = algoliasearch(\n    \"941VIYWL4A\",\n    \"b614b1514851311bff8457c46f148ebe\"\n  );\n  const index = client.initIndex(\"pizzaShops\");\n\n  // Conduct search for pizza shops by the user's location\n  index\n    .search(\"\", {\n      aroundLatLng: userLocation,\n    })\n    .then(({ hits }) => {\n      setShops(hits);\n    });\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst rootEl = document.getElementById(\"root\");\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n    ,\n  rootEl\n);\nreportWebVitals();\n"],"sourceRoot":""}